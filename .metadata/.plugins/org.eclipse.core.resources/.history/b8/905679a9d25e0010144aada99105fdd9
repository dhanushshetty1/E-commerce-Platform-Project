package com.shetty.ecommerce.controller;

import com.shetty.ecommerce.Entities.Product;
import com.shetty.ecommerce.Entities.Review;
import com.shetty.ecommerce.Entities.User;
import com.shetty.ecommerce.dao.ProductRepository;
import com.shetty.ecommerce.dao.ReviewRepository;
import com.shetty.ecommerce.dao.UserRepository;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.Mockito.when;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;

import org.springframework.http.MediaType;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.web.servlet.MockMvc;

import java.util.List;

import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.csrf;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@WebMvcTest(ReviewController.class)
class ReviewControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private ReviewRepository reviewRepository;

    @MockBean
    private ProductRepository productRepository;

    @MockBean
    private UserRepository userRepository;

    private Product mockProduct;
    private User mockUser;
    private Review mockReview;

    @BeforeEach
    void setUp() {
        mockProduct = new Product();
        mockProduct.setId(1L);
        mockProduct.setName("Laptop");

        mockUser = new User();
        mockUser.setId(1);
        mockUser.setName("John");

        mockReview = new Review();
        mockReview.setId(1L);
        mockReview.setProduct(mockProduct);
        mockReview.setUser(mockUser);
        mockReview.setRating(5);
        mockReview.setComment("Great product!");
    }

    @WithMockUser(roles = {"USER"})
    @Test
    void testAddReview() throws Exception {
        when(productRepository.findById(anyLong())).thenReturn(java.util.Optional.of(mockProduct));
        when(userRepository.findById(anyLong())).thenReturn(java.util.Optional.of(mockUser));
        when(reviewRepository.save(any(Review.class))).thenReturn(mockReview);

        String reviewJson = """
            {
                "product": { "id": 1 },
                "user": { "id": 1 },
                "rating": 5,
                "comment": "Great product!"
            }
        """;

        mockMvc.perform(post("/reviews")
                .contentType(MediaType.APPLICATION_JSON)
                .content(reviewJson)
                .with(csrf()))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.id").value(1))
                .andExpect(jsonPath("$.rating").value(5))
                .andExpect(jsonPath("$.comment").value("Great product!"));
    }

    @WithMockUser(roles = {"USER"})
    @Test
    void testGetReviewsByProduct() throws Exception {
        when(reviewRepository.findAll()).thenReturn(List.of(mockReview));

        mockMvc.perform(get("/reviews/product/1"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[0].id").value(1))
                .andExpect(jsonPath("$[0].rating").value(5))
                .andExpect(jsonPath("$[0].comment").value("Great product!"));
    }
}
